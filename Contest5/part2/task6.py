'''
Развлекательный телеканал транслирует шоу «Колесо Фортуны». 
В процессе игры участники шоу крутят большое колесо, разделенное на сектора.
В каждом секторе этого колеса записано число. После того как колесо 
останавливается, специальная стрелка указывает на один из секторов. 
Число в этом секторе определяет выигрыш игрока.

Юный участник шоу заметил, что колесо в процессе вращения замедляется из-за
того, что стрелка задевает за выступы на колесе, находящиеся между секторами.
Если колесо вращается с угловой скоростью v градусов в секунду, и стрелка,
переходя из сектора X к следующему сектору, задевает за очередной выступ,
то текущая угловая скорость движения колеса уменьшается на k градусов в
секунду. При этом если v ≤ k, то колесо не может преодолеть препятствие и
останавливается. Стрелка в этом случае будет указывать на сектор X.

Юный участник шоу собирается вращать колесо. Зная порядок секторов на
колесе, он хочет заставить колесо вращаться с такой начальной скоростью,
чтобы после остановки колеса стрелка указала на как можно большее число.
Колесо можно вращать в любом направлении и придавать ему начальную угловую
скорость от a до b градусов в секунду.

Требуется написать программу, которая по заданному расположению чисел в
секторах, минимальной и максимальной начальной угловой скорости вращения
колеса и величине замедления колеса при переходе через границу секторов
вычисляет максимальный выигрыш.
'''
# Входные данные:
# N - количество секторов
N = int(input())

# Секторы
sectors = list(map(int, input().split()))

# v_min, v_max, v_diff - минимальная и максимальная начальная угловая скорость
v_min, v_max, v_diff = map(int, input().split())

# Алгоритм:

# Находим сектор, в который попадает стрелка при минимальной скорости
min_sector_index = (v_min - 1) // v_diff % N
# Находим сектор, в который попадает стрелка при максимальной скорости
max_sector_index = min_sector_index + min((v_max - v_min) // v_diff, N - 1)

# Находим максимальное значение в секторах
max_res = 0

for sector_index in range(min_sector_index, max_sector_index + 1):
    max_value = max(sectors[sector_index % N], sectors[-sector_index % N])
    if max_value > max_res:
        max_res = max_value

# Выходные данные:
print(max_res)
